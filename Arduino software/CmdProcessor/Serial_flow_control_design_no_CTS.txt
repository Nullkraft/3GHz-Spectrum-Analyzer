miso_pin;
analog_pin;
LO#_sel;
num_data_points;
static num_data_points_processed = 0;
size_data_buf_as_word = 8;						// 8 words = 32 bytes
buf_index = 0;

*** ARDUINO main loop() ***
	  Arduino waits for PC to send a new instruction with the Command-Flag set.
	  PC sends a new instruction telling the Arduino to select LO2 or LO3.

<<< While (Serial.available)
	  The Arduino receives the Command-Flag from the PC to select LO2 or LO3.
		The Arduino sets mosi_pin == [LO2 OR LO3]_SEL pin.
		The Arduino parses out num_data_points and copies it to num_data_points_processed.
		The Arduino selects the ADC, analog_pin = LO#_sel.

<><><>
  >>> if(num_data_points_processed < num_data_points) ...

	*** PC APP ***
		The PC sends 8 data words, 32 bytes, to the Arduino ...
		The PC waits to receive 8 ADC data points, 16 bits each, from the Arduino.

	*** ARDUINO main loop() ***
		The Arduino copies each word: data_word_buf[buf_index] = 
	  
	*** Arduino SPI loop() ***
		Once the data_word_buf[] has been filled: if (buf_index == (size_data_buf_as_word-1))
		The Arduino loops through the data_word_buf
	  ^^^ For (int i; i < size_data_buf_as_word, i++) ...
			The Arduino performs bitmasking on data_word_buf[i] to update Reg[0] andReg[1].
			The Arduino spi_write()'s Reg[1] to the selected LO.
			The Arduino spi_write()'s Reg[0] to the selected LO.
			The Arduino spi_read()'s from the LO#_ADC and stores the 16 bit result in data_word_buf[i]
				  (Yes! It overwrites the value we just used to program the LO! Recycle/Reuse)
			The Arduino increments num_data_points_processed
			The Arduino increments the data_word_buf index
			i++
	  ^^^ The Arduino exits the SPI loop().
	
	*** Arduino analog serial data loop() ***
		The Arduino Serial.write()'s the least 16 bits of the data_word_buf[] contents to the PC.
	  @@@ For (int i; i < size_data_buf_as_word, i++) ...
			The Arduino Serial.write()'s (uint16_t)data_word_buf[i] to the PC.
	  @@@ The Arduino exits the analog serial data loop().
		  
	*** PC APP ***
		The PC receives and processes the 8 ADC data points.
		If needed the PC sends 8 more data points to the Arduino ...

	*** ARDUINO main loop() ***
		goto <><><>



Notes on F, M and N values:

Always program Reg[1] first and Reg[0] second.

(M) Modulus Value = M, bits[11:0] (12 bits), --> Reg[1] bits[14:3]   <Invalid M values are M=0 and M=1>

(F) Fractional Division Value = F, bits[11:0] (12 bits), --> Reg[0] bits[14:3]

(N) Integer Division Value = N, bits[7:0] --> Reg[0] bits[22:15]
       <We only use valid INTEGER    N values from N=16 to N=240>
       <We only use valid FRACTIONAL N values from N=20 to N=240>










